#+TITLE: rekor.el
#+PROPERTY: header-args :tangle yes

* package prologue
#+begin_src emacs-lisp
  ;;; rekor.el --- An ORM over EmacSQL -*- lexical-binding: t; -*-
  ;; Copyright (C) 2020 Dustin Lacewell

  ;; Author: Dustin Lacewell <dlacewell@gmail.com>
  ;; Version: 0.1.0
  ;; Package-Requires: ((emacs "26") (emacsql-sqlite "0"))
  ;; Keywords: org-mode formatting
  ;; URL: http://github.com/apoptosis/rekor.el

  ;;; Commentary:

  ;; This package provides an ORM over EmacSQL

  ;;; Code:
  (require 'emacsql-sqlite)
#+end_src

* configuration
* boilerplate
* commands
* test
  :PROPERTIES:
  :header-args:    :tangle no
  :END:

#+begin_src emacs-lisp
  (setq model-registry nil)

  (defun rekor:generate-slot (form)
    (seq-let (name type) form
      `(,name :initarg ,(intern (s-lex-format ":${name}"))
              :accessor ,(intern (s-lex-format ":${name}"))
              :type ,type)))

  ;; (rekor:generate-slot '(foo bar))

  (defmacro defmodel (name &rest fields)
    (let* ((slot-forms (-map 'rekor:generate-slot fields))
           (class-name (intern (s-lex-format "${name}-class")))
           (constructor-name (intern (s-lex-format "${name}:new")))
           (save-method-name (intern (s-lex-format "${name}:save"))))
      `(progn
         (defclass ,class-name () ,slot-forms)

         (cl-defmethod ,save-method-name ((obj person-class))
           (message "Hello, %s %s!"
                    (oref obj :first-name)
                    (oref obj :last-name)))

         (defun ,constructor-name (&rest initargs)
           (apply ,class-name initargs)))))

  (defmodel person
    (first-name string)
    (last-name string)
    (age number))

  (person:save
   (person:new :first-name "foo"
               :last-name "bar"
               :age 34))
#+end_src
* package epilogue
#+begin_src emacs-lisp
  (provide 'rekor)

  ;;; rekor.el ends here
#+end_src

